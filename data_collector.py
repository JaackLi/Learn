# -*- coding: utf-8 -*-
"""1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10hNZqCtIMKKM8nnxQt6LD-RYJEFEpan3
"""

import pandas as pd
import numpy as np
import re
# 读取.testlog文件
data = pd.read_csv("cooja.testlog", delimiter="\t", header=None)

# 将数据保存为CSV文件
data.to_csv("sample.csv", index=False)

# read CSV file
data = pd.read_csv("sample.csv")

# 创建三个CSV文件对象，并添加表头
sendData = open("SendData.csv", "w")
sendData.write("send_time,id,packet\n")
RecvData = open("RecvData.csv", "w")
RecvData.write("send_time,id,packet\n")
OtherData = open("OtherData.csv", "w")
OtherData.write("send_time,id,packet\n")

# 遍历每一行
for index, row in data.iterrows():
    # 获取第三个元素
    third_element = row[2]
    
    # 根据第三个元素的开头，将行写入不同的CSV文件中
    if third_element.startswith("SendData"):
        sendData.write("{},{},{}\n".format(row[0], row[1], row[2]))
    elif third_element.startswith("RecvData"):
        RecvData.write("{},{},{}\n".format(row[0], row[1], row[2]))
    else:
        OtherData.write("{},{},{}\n".format(row[0], row[1], row[2]))
    
# 关闭CSV文件
sendData.close()
RecvData.close()
OtherData.close()

data = pd.read_csv("SendData.csv")

#Data column splitting and conversion

data['packet_type'] = data['packet'].str.split(' ').str[0]
data['packet_number'] = data['packet'].str.split(' ').str[1]

data['id'] = data['id'].str.split(':').str[1]

#Delete unnecessary data columns

del data['packet']

#Data replacement
data['packet_type'].replace("SendData", False, inplace=True)

#Data type conversion (preparing for mongodb)
data['packet_type'] = data['packet_type'].astype('bool')
data['id'] = data['id'].astype('int64')

#Increase the label to indicate whether the data is processed

data['label'] = False
data.to_csv('SendData_raw.csv', index=False)

raw = pd.read_csv("./SendData_raw.csv", dtype={'packet_number': object})

raw.info()

data = pd.read_csv("RecvData.csv")

#Data column splitting and conversion

data['packet_type'] = data['packet'].str.split(' ').str[0]
data['packet_number'] = data['packet'].str.split(' ').str[1]

data['id'] = data['id'].str.split(':').str[1]

#Delete unnecessary data columns

del data['packet']

#Data replacement
data['packet_type'].replace("RecvData", True, inplace=True)

#Data type conversion (preparing for mongodb)
data['packet_type'] = data['packet_type'].astype('bool')
data['id'] = data['id'].astype('int64')

#Increase the label to indicate whether the data is processed

data['label'] = False
data.to_csv('RecvData_raw.csv', index=False)

raw = pd.read_csv("./RecvData_raw.csv", dtype={'packet_number': object})

raw.info()

# 定义一个函数，用于从字符串中提取dutycycle属性的值
def extract_dutycycle(data):
    match = re.search(r"dutycycle:\s*(\d+(?:\s+\d+)*)", data)
    if match:
        dutycycle_list = match.group(1).split()
        return int(dutycycle_list[-1])
    return None

# 定义一个函数，用于从字符串中提取parentChange属性的值
def extract_parent_change(data):
    match = re.search(r"parentChange\s*(\d+)", data)
    if match:
        return int(match.group(1))
    return None

# 定义一个函数，用于从字符串中提取drops属性的值
def extract_drops(data):
    match = re.search(r"drops\s*(\d+)", data)
    if match:
        return int(match.group(1))
    return None

# 读取CSV文件
data = pd.read_csv("OtherData.csv")

# 创建一个字典用于储存id相同的行数据
id_dict = {}

# 遍历每一行，并从"packet"列中提取属性
for index, row in data.iterrows():
    # 提取id
    id_str = row["id"]
    match = re.search(r"ID:(\d+)", id_str)
    if match:
        id = int(match.group(1))
        
        # 提取dutycycle, parentChange, drops属性的值
        dutycycle = extract_dutycycle(row["packet"])
        parent_change = extract_parent_change(row["packet"])
        drops = extract_drops(row["packet"])
        
        # 将属性值添加到字典中对应的id的列表中
        if id not in id_dict:
            id_dict[id] = [id, None, None, None]
        if dutycycle is not None:
            id_dict[id][3] = dutycycle
        if parent_change is not None:
            id_dict[id][2] = parent_change
        if drops is not None:
            id_dict[id][1] = drops
            
# 将字典转换成DataFrame对象
result = pd.DataFrame.from_dict(id_dict, orient="index", columns=["id", "drops", "parentChange", "energyConsumption"])

# 将结果保存到新的CSV文件中
result.to_csv("OtherData_raw.csv", index=False)
raw = pd.read_csv("./OtherData_raw.csv")
raw.info()